import pandas as pdfrom sklearn import preprocessingimport numpy as npfrom keras.utils import to_categoricaldata = pd.DataFrame(pd.read_csv('IO/nor_1.csv',                                usecols=['A', 'B', 'C', 'D1', 'D2', 'D4', 'D5', 'E1', 'E2', 'E3', 'E4', 'F11', 'F12', 'F13',                                         'F14', 'F21', 'F22', 'F23', 'F24','F25', 'F26', 'F31', 'F32', 'F33', 'F35', 'G', 'H']))# 'D3' has no data# 'F34' all 1163 0sdig_cols=['A', 'B', 'D1', 'D2', 'D4', 'D5', 'E2', 'E3', 'E4', 'F11', 'F12', 'F13',          'F14', 'F21', 'F22', 'F23', 'F24','F25','G' ]str_cols=[ 'C', 'E1','H'] # transformed to one-hotfill_dig_cols=['F26','F31','F32','F33','F35'] # F26 fill with average, else fill with '0'def average(object_name):    sum = 0    cou = 0    for i in data[object_name]:        if not (i != i):            cou = cou + 1            sum = sum + i    print(object_name + '平均值为：%f' % (sum / cou))    return (sum / cou)def normalization(object_name):    dif = max(data[object_name]) - min(data[object_name])    aver = average(object_name)    data[object_name] = data[object_name].apply(lambda x: (x - aver) / dif)def count(object_name):    counts = data[object_name].value_counts()    quants = counts.values    print('----' + object_name + '-----')    print('sum:   %d'  %sum(quants))    print(counts)    print('\r')    return counts    print(data.info())print('------')def zip_(object_name):    coun = count(object_name)    return dict(zip(coun.keys(), list(range(len(coun.keys())))))def label_to_int(object_name):    a = zip_(object_name)    data[object_name] = data[object_name].apply(lambda x: a[x] )for i in str_cols:   label_to_int(i)   encoded = to_categorical(data[i])   encoded = pd.DataFrame(encoded)   data = pd.concat([data, encoded], axis=1)   for i in str_cols:    del data[i]pd.DataFrame.to_csv(data, 'IO/one_1.csv', index=None)# 将C、E1、H转化为one-hot，并且删除原来的列