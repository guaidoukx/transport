import numpy as npimport pandas as pdfrom keras.models import Sequentialfrom keras.layers.core import Dense, Dropout, Activationfrom keras.layers import Conv2D, MaxPooling2D, Flattenfrom keras.optimizers import SGD, Adamfrom keras.utils import np_utilsfrom keras.datasets import mnistfrom sklearn.metrics import mean_squared_error, r2_scoredef read_data(split):    data = pd.DataFrame(pd.read_csv('one.csv'))    Y = data['A']    X = data.drop(['A'], axis=1)        index = np.arange(0, len(Y))    np.random.shuffle(index)    Y = Y.values[index]    X = X.values[index]        train_X = X[:split]    train_Y = Y[:split]    test_X = X[split:]    test_Y = Y[split:]        return train_X,train_Y, test_X,test_Ytrain_X,train_Y, test_X,test_Y = read_data(1800)print(train_X.shape)model = Sequential()model.add(Dense(input_dim=39, units=500, activation='relu'))model.add(Dense(units=1000, activation='relu'))model.add(Dense(units=1000, activation='relu'))# model.add(Dense(units=1000, activation='relu'))model.add(Dense(units=500, activation='relu'))model.add(Dense(units=200, activation='relu'))model.add(Dense(units=100, activation='relu'))model.add(Dense(units=1))model.compile(loss='mse', optimizer='Adam')model.fit(train_X,train_Y, batch_size=100, epochs=70)result = model.evaluate(test_X,test_Y)r_train = model.predict(train_X)r_test = model.predict(test_X)print('Train R2 score: %.3f' % r2_score(train_Y, r_train))print('Test R2 score: %.3f' % r2_score(test_Y, r_test))print('Test result loss:', result)