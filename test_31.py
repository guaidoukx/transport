#----coding:utf-8-----import pandas as pdimport numpy as npfrom sklearn.svm import SVRfrom sklearn.metrics import mean_squared_error, r2_scorefrom sklearn.cross_validation import KFoldfrom keras.layers.core import Densefrom keras.models import Sequentialdata = pd.DataFrame(pd.read_csv('IO/after.csv'))testall = pd.DataFrame(pd.read_csv('IO/test_after.csv'))overall = 2171# print(testall)def read_data():    Y = data['A']    X = data.drop(['A'], axis=1)    index = np.arange(0, len(Y))    np.random.shuffle(index)    train_Y = Y.values[index]    train_X = X.values[index]    test_Y = testall['A']    test_X = testall.drop(['A'], axis=1)    return train_X, train_Y,test_X, test_Y#     L=[]#     kf = KFold(overall, n_folds=split, shuffle=True)#     for train_index, test_index in kf:#         # print(train_index, test_index)#         train_X = X[train_index]#         train_Y = Y[train_index]#         test_X = X[test_index]#         test_Y = Y[test_index]#         L.append([train_X,train_Y,test_X,test_Y])#     return L, kf##def MAD(target, predictions):    absolute_deviation = np.abs(target - predictions)    return np.mean(absolute_deviation)##def main( model):    train_x, train_y, test_x, test_y = read_data()    print(train_y)    # print(test_y)    if model == 'SVR':        models = SVR(kernel='poly', degree=4, gamma=1.8,)        models.fit(train_x,train_y)        print('-----SVR Training Finish & result------' )    else:        models = Sequential()        models.add(Dense(input_dim=39, units=500, activation='relu'))        models.add(Dense(units=1000, activation='relu'))        models.add(Dense(units=1000, activation='relu'))        models.add(Dense(units=500, activation='relu'))        models.add(Dense(units=200, activation='relu'))        models.add(Dense(units=100, activation='relu'))        models.add(Dense(units=1))#        models.compile(loss='mse', optimizer='Adam')        models.fit(train_x,train_y,batch_size=100, epochs=70)        result = models.evaluate(test_x, test_y)        print('\n----- Neural Network Training Finish & result-----' )        print('Test result loss:', result)#        train_pred = models.predict(train_x)        test_pred = models.predict(test_x)        # y_true.append(pd.DataFrame(test_y))        # y_pred.append(pd.DataFrame(test_pred))#        for i, pred in enumerate([            [train_pred, test_pred]        ]):            print("-Train-")            trainRMSE = np.sqrt(mean_squared_error(train_y, pred[0]))            trainR2 = r2_score(train_y, pred[0])            trainMAD = MAD(train_y,pred[0])            print(pred[0])            print("Root Mean Squared Error: %.3f"  % trainRMSE)            print('R2 score: %.3f'  % trainR2)            print("Mean Absolute Deviation: %.3f" % trainMAD)#            print("-Test-")            testRMSE = np.sqrt(mean_squared_error(test_y, pred[1]))            print("Root Mean Squared Error: %.3f" % testRMSE)            testR2 = r2_score(test_y, pred[1])            print('R2 score: %.3f' % testR2)            # print(pred[1])            # testMAD = MAD(test_y, pred[1])            # print("Mean Absolute Deviation: %.3f" % testMAD)#             # ----------------------------------------------#             L.append([trainRMSE,trainR2,trainMAD,testRMSE,testR2,testMAD])#     print("\n-----====final result===-----")#     FT = []#     for i in list(range(len(L[0]))):#         sum_ = 0#         for j, red in enumerate(kf):#             sum_ = sum_ + L[j][i]#         FT.append(sum_/tran_test_split_)##     print('--final train--')#     print("final train Root Mean Squared Error: %.3f"  % FT[0])#     print("final train R2 score: %.3f"  % FT[1])#     print("final train Mean Absolute Deviation: %.3f"  % FT[2])##     final_true_y = pd.concat(y_true)#     final_pred_y = pd.concat(y_pred)##     print('--final test--')#     print(model,"final test Root Mean Squared Error: %.3f" % mean_squared_error(final_true_y,final_pred_y))#     print(model,"final test R2 score: %.3f" % r2_score(final_true_y,final_pred_y))#     print(model,"final test Mean Absolute Deviation: %.3f" % MAD(final_true_y,final_pred_y))if __name__ == '__main__':    main('NN')    # read_data(5)