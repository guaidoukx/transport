import sklearnimport pandas as pdimport numpy as npfrom sklearn.svm import SVRfrom sklearn.metrics import mean_squared_error, r2_scoredef read_data(split):    data = pd.DataFrame(pd.read_csv('one.csv'))    Y = data['A']    X = data.drop(['A'], axis=1)        index = np.arange(0, len(Y))    np.random.shuffle(index)    Y = Y.values[index]    X = X.values[index]        train_ = [X[:split], Y[:split]]    test_ = [X[split:], Y[split:]]    return train_, test_def MAD(target, predictions):    absolute_deviation = np.abs(target - predictions)    return np.mean(absolute_deviation)def main():    print('start!')    tran_test_split_ = 1700    train_, test_ = read_data(tran_test_split_)    print('read finish!')    model_svr = SVR(kernel='poly', degree=4, gamma=1.8,)    model_svr.fit(train_[0], train_[1])    print('SVR Training Finish')    svr_train_pred = model_svr.predict(train_[0])    svr_test_pred = model_svr.predict(test_[0])    for i, pred in enumerate([        [svr_train_pred, svr_test_pred]    ]):        print("------------------------------")        print("-Train-")        print("Root Mean Squared Error: %.3f"              % np.sqrt(mean_squared_error(train_[1], pred[0])))        print('R2 score: %.3f'              % r2_score(train_[1], pred[0]))        print("Mean Absolute Deviation: %.3f"              % MAD(train_[1],pred[0]))        print('\r')                print("-Test-")        # The mean squared error        print("Root Mean Squared Error: %.3f"              % np.sqrt(mean_squared_error(test_[1], pred[1])))        print('R2 score: %.3f'              % r2_score(test_[1], pred[1]))        print("Mean Absolute Deviation: %.3f"              % MAD(test_[1], pred[1]))    if __name__ == '__main__':    main()